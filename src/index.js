import { typeDefs } from "./graphql-schema";
import { ApolloServer, gql } from "apollo-server";
import express from "express";
import { v1 as neo4j } from "neo4j-driver";
import { makeAugmentedSchema } from "neo4j-graphql-js";
import dotenv from "dotenv";
import bodyParser from "body-parser";

import ApolloClient from "apollo-client";
import { ApolloLink } from "apollo-link";
import fetch from "node-fetch";
import { HttpLink } from "apollo-link-http";
import { InMemoryCache } from "apollo-cache-inmemory";
import { onError } from 'apollo-link-error'
import seedmutations from "./seed/seed-mutations";
import seedqueries from "./seed/seed-queries";

import { getPageTitle } from './helper'

// set environment variables from ../.env
dotenv.config();

const app = express();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || "bolt://localhost:7687",
  neo4j.auth.basic(
    process.env.NEO4J_USER || "neo4j",
    process.env.NEO4J_PASSWORD || "neo4j"
  )
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: { driver },
  schema: schema,
  introspection: true,
  playground: true
});

server.listen({port: 4001}).then(({ url }) => {
  console.log(`ðŸš€ GraphQL server ready at ${url}`)
});


const errorLink = onError(({ graphQLErrors }) => {
  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))
})

const client = new ApolloClient({
  link: ApolloLink.from([errorLink, new HttpLink({
    uri: process.env.GRAPHQL_URI,
    fetch
  })]),
  cache: new InMemoryCache(),
});



// Specify port and path for GraphQL endpoint
// const port = process.env.GRAPHQL_LISTEN_PORT || 4001;
// const path = "/graphql";

/*
* Optionally, apply Express middleware for authentication, etc
* This also also allows us to specify a path for the GraphQL endpoint
*/
// server.applyMiddleware({app, path});

app.use(bodyParser.json());

function createMutation (user, ownRepAtVote, now, links, title, topics, requirements) {
  console.log('arguments', arguments)
  return `
    mutation {
      r1: CreateResource(title: "${title}", links: "${links}") {
        title
      }
      r1c: AddResourceCreatedBy(from: {
        title: "${title}"
      }, to: {
        email: "${user}"
      }, data: {
        timestamp: {
          formatted: "${now}"
        }
      }) {
        from {
          title
        }
      }
      ag1: CreateAmosGame(id: "ag1") {
        id
      }
      rag1: AddResourceAmosGames(from: {
        id: "ag1"
      }, to: {
        title: "${title}"
      }) {
        from {
          id
        }
      }
      us1: AddUserVotes(from: {
        id: "ag1"
      }, to: {
        email: "${user}"
      }, data: {
        timestamp: {
          formatted: "${now}"
        }
        ownRepAtVote: ${ownRepAtVote}
        agreeingRep: 0
      }) {
        from {
          id
        }
      }
    }
  `
}

const submitReview = (req, res) => {
  // console.log('asdf', req)
  // console.log('req.body', req.body)
  // console.log('zxcv', res)
  
  const {links, topics, requirements} = req.body

  // Check review has at least one link
  if (!links) {
    throw 'No links field'
  }
  
  getPageTitle(links[0])
    .then(title => {
      console.log('working?', )
      const now = (new Date()).toISOString()

      const mutation = createMutation('Mukul', 0, now, links, title, topics, requirements)
      console.log('mutation', mutation)
      client
        .mutate({
          mutation: gql(mutation)
        })
        .then(data => console.log(data.data))
        .catch(error => console.log(error))

      res.send('success')
    })
    .catch(() => {
      res.send('something bad happened. Please try again later')
    })
  
}

app.post('/submit-review', submitReview)

const port = 4002

app.listen({port}, () => {
  console.log(`Express app ready at http://localhost:${port}`);
});

// app.listen({port, path}, () => {
//   console.log(`GraphQL server ready at http://localhost:${port}${path}`);
// });
